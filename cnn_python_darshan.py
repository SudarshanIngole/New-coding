# -*- coding: utf-8 -*-
"""CNN_Python_darshan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15P5KO6-0F9Ksytrx4f3HmpJ0NBV0DD1U
"""

import numpy as np

import keras
from keras.datasets import cifar10

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

x_train.shape

y_train.shape

y_train

x_test.shape

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

x_train[5555]

fig =plt.figure(figsize=[5,1])
plt.imshow(x_train[0])

#! wget https://www.pngfind.com/pngs/m/391-3915915_spider-man-png-transparent-png.png

fig = plt.figure(figsize=(28,20))
for i in range(24):
  ax= fig.add_subplot(8, 3, i + 1, xticks=[], yticks=[])
  ax.imshow(x_train[i])

# Scaling the data
# standarardization (X - Xmin)/(Xmax - Xmin)
# minmax (X - mean)/standardization

x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255

pip install np_utils

y_train.shape

number_of_classes=len(np.unique(y_train))
number_of_classes

number=len(np.unique(y_test))
number

from keras.utils import to_categorical

num_classes = len(np.unique(y_train))

y_train = keras.utils.to_categorical(y_train, num_classes=10)

y_test = keras.utils.to_categorical(y_test, num_classes=10)

y_train.shape

to_categorical

(x_train, x_valid) = x_train[5000:], x_train[:5000]
(y_train, y_valid) = y_train[5000:], y_train[:5000]

print(x_train.shape)

print(x_train.shape[0], 'Train Samples')
print(x_test.shape[0], 'Test Sample')
print(x_valid.shape[0], 'validation Sample')

y_train[555]

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential()

model.add(Conv2D(filters=16, kernel_size=3, padding='same', activation='relu',input_shape=(32, 32, 3)))

model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=32, kernel_size=3, padding='same', activation='relu'))

model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))

model.add(MaxPooling2D(pool_size=2))

model.add(Dropout(0.3))

model.add(Flatten())

model.add(Dense(500, activation='relu'))

model.add(Dropout(0.3))

model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

from keras.callbacks import ModelCheckpoint

# train the model
checkpointer = ModelCheckpoint(filepath='model_weights_best.hdf5',verbose=2, save_best_only=True)

hist = model.fit(x_train, y_train, batch_size=100, epochs=4,validation_data=(x_valid, y_valid),callbacks=checkpointer, verbose=1, shuffle=True)

model.load_weights('model_weights_best.hdf5')

# get predictions on the test set
y_hat = model.predict(x_test)

# define text labels (source: https://www.cs.toronto.edu/~kriz/cifar.html)
cifar10_labels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

y_test[56]

y_hat[56]

np.argmax(y_hat[56])



score = model.evaluate(x_test, y_test, verbose=0)
score

from google.colab.patches import cv2_imshow
import os, json, cv2, random

im = cv2.imread("/content/pexels-photo-210019.jpeg")
cv2_imshow(im)

im.shape

import tensorflow as tf
img=tf.keras.utils.load_img('/content/pexels-photo-210019.jpeg', target_size=(32,32,3))

img_array=tf.keras.utils.img_to_array(img)
img_array

img_array.shape

img__array=tf.expand_dims(img_array, 0)
img__array.shape

predictions = model.predict(img__array)
score = predictions
score

cifar10_labels[7]

cifar10_labels[np.argmax(score)]

